---
version: '3'
services:
  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order_service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: giresse2001
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventor
      POSTGRES_USER: root
      POSTGRES_PASSWORD: giresse2001
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped


  ##mysql-inventory

  mysql-inventory:
    container_name: mysql-inventory
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: inventor
      MYSQL_ROOT_PASSWORD: giresse2001
      #MYSQL_USER: user1
      #MYSQL_PASSWORD: giresse2001
    volumes:
      - ./mysql-inventory:/var/lib/mysql
    ports:
      - "3308:3306"
    restart: unless-stopped

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db




  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: djeufacklandry/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/product-service
    ports:
      - "8081:8081"
    depends_on:
      - mongo


  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: djeufacklandry/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - postgres-order
    ports:
      - "8082:8082"

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: djeufacklandry/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:3306/inventor
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=giresse2001
      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=com.mysql.cj.jdbc.Driver
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_JPA_DATABASE-PLATFORM=org.hibernate.dialect.MySQLDialect
    depends_on:
      - mysql-inventory
    ports:
      - "8083:8083"


  ## Notification-Service Docker Compose Config


  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password